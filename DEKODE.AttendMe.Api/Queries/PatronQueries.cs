using DEKODE.AttendMe.Api.Model;
using DEKODE.AttendMe.Api.Model.Entities;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using DEKODE.AttendMe.Common;

namespace DEKODE.AttendMe.Api.Queries
{
    public class PatronQueries : IPatronQueries
    {
        private readonly AttendMeDbContext _dbContext;

        public PatronQueries(AttendMeDbContext dbContext)
        {
            _dbContext = dbContext;
        }

        public async Task<IList<Patron>> GetAllAsync(int organisationId)
        {
            // 3 Ways to View and Log the SQL Generated by Entity Framework Core 5
            // https://eamonkeane.dev/3-ways-to-view-sql-generated-by-entity-framework-core-5/

            var query = _dbContext.Patrons.Where(p => p.OrganisationId == organisationId &&
                                                      p.IsDeleted == false &&
                                                      p.EffectiveEndDate == DateTimeHelper.NewEndDateTime());

            // in break mode --> query --> DebugView --> Query

            return await query.ToListAsync();
        }

        public async Task<Patron> GetByIdAsync(int patronId)
        {
            return await _dbContext.Patrons.FindAsync(patronId);
        }

        public async Task<IList<VisitorLog>> GetVistorLogs(DateTime? fromDateTime, DateTime? toDateTime, int organisationId)
        {
            var query = _dbContext.VisitorLogs.Where(x => x.OrganisationId == organisationId);

            if (fromDateTime.HasValue && toDateTime.HasValue)
                query = query.Where(x => x.InDateTime >= fromDateTime.Value && x.InDateTime <= toDateTime.Value);
            else if (fromDateTime.HasValue)
                query = query.Where(x => x.InDateTime >= fromDateTime.Value);
            else if (toDateTime.HasValue)
                query = query.Where(x => x.InDateTime <= fromDateTime.Value);

            query = query.OrderByDescending(x => x.InDateTime);

            return await query.ToListAsync();
        }

        public async Task<IList<PatronType>> GetPatronTypesAsync()
        {
            return await _dbContext.PatronTypes.ToListAsync();
        }
    }
}