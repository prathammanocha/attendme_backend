// <auto-generated />
using System;
using DEKODE.AttendMe.Api.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DEKODE.AttendMe.Api.Migrations
{
    [DbContext(typeof(AttendMeDbContext))]
    partial class AttendMeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("DEKODE.AttendMe.Api.Model.Entities.Compliance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AuditUser")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EffectiveEndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EffectiveStartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("Compliances");
                });

            modelBuilder.Entity("DEKODE.AttendMe.Api.Model.Entities.Organisation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AuditUser")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EffectiveEndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EffectiveStartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Website")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Organisations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuditUser = "sys_admin",
                            ContactEmail = "gmaxwell@cricnsw.com.au",
                            ContactName = "Adam Gilchrist",
                            ContactPhone = "0421119636",
                            EffectiveEndDate = new DateTime(9999, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EffectiveStartDate = new DateTime(2023, 1, 25, 0, 0, 0, 0, DateTimeKind.Local),
                            Guid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            Name = "Cricket NSW"
                        });
                });

            modelBuilder.Entity("DEKODE.AttendMe.Api.Model.Entities.OrganisationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AuditUser")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EffectiveEndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EffectiveStartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("OrganisationUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuditUser = "sys_admin",
                            EffectiveEndDate = new DateTime(9999, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EffectiveStartDate = new DateTime(2023, 1, 25, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "dwarner@cricnsw.com.au",
                            FirstName = "David",
                            Guid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            LastName = "Warner",
                            OrganisationId = 1,
                            Password = "$2a$11$0yNqYtIew9pkuD/qpufX0.48klW6qfBZ3oWIsPdnrqjItvPziWyq."
                        });
                });

            modelBuilder.Entity("DEKODE.AttendMe.Api.Model.Entities.Patron", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AuditUser")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CompanyName")
                        .HasColumnType("longtext");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EffectiveEndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EffectiveStartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsAuthorizedToCollect")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("int");

                    b.Property<int>("PatronTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceKeyId")
                        .HasColumnType("longtext");

                    b.Property<bool>("TermsAndConditionCheck")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("PatronTypeId");

                    b.ToTable("Patrons");
                });

            modelBuilder.Entity("DEKODE.AttendMe.Api.Model.Entities.PatronCompliance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AuditUser")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ComplianceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EffectiveEndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EffectiveStartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PatronId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ComplianceId");

                    b.HasIndex("PatronId");

                    b.ToTable("PatronCompliances");
                });

            modelBuilder.Entity("DEKODE.AttendMe.Api.Model.Entities.PatronStudent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AuditUser")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EffectiveEndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EffectiveStartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PatronId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatronId");

                    b.HasIndex("StudentId");

                    b.ToTable("PatronStudents");
                });

            modelBuilder.Entity("DEKODE.AttendMe.Api.Model.Entities.PatronType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AuditUser")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EffectiveEndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EffectiveStartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("PatronTypes");
                });

            modelBuilder.Entity("DEKODE.AttendMe.Api.Model.Entities.SbscrptnType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("AuditUser")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("DevicesAllowed")
                        .HasColumnType("int");

                    b.Property<DateTime>("EffectiveEndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EffectiveStartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("SbscrptnTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 1200m,
                            AuditUser = "sys_admin",
                            Description = "Annual",
                            DevicesAllowed = 2,
                            EffectiveEndDate = new DateTime(9999, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EffectiveStartDate = new DateTime(2023, 1, 25, 0, 0, 0, 0, DateTimeKind.Local),
                            Guid = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("DEKODE.AttendMe.Api.Model.Entities.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AuditUser")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EffectiveEndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EffectiveStartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("int");

                    b.Property<int>("Pin")
                        .HasColumnType("int");

                    b.Property<string>("RefNo")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("StaffMembers");
                });

            modelBuilder.Entity("DEKODE.AttendMe.Api.Model.Entities.StaffLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("LogDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LogType")
                        .HasColumnType("int");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.ToTable("StaffLog");
                });

            modelBuilder.Entity("DEKODE.AttendMe.Api.Model.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AuditUser")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EffectiveEndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EffectiveStartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("DEKODE.AttendMe.Api.Model.Entities.StudentIncident", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AuditUser")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EffectiveEndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EffectiveStartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("StudentIncidents");
                });

            modelBuilder.Entity("DEKODE.AttendMe.Api.Model.Entities.StudentIncidentAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AuditUser")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EffectiveEndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EffectiveStartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("StudentIncidentActions");
                });

            modelBuilder.Entity("DEKODE.AttendMe.Api.Model.Entities.StudentIncidentLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ActionOther")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("IncidentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IncidentOther")
                        .HasColumnType("longtext");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("StudentIncidentActionId")
                        .HasColumnType("int");

                    b.Property<int>("StudentIncidentId")
                        .HasColumnType("int");

                    b.Property<int>("StudentIncidentSymptomId")
                        .HasColumnType("int");

                    b.Property<string>("SymptomsOther")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.HasIndex("StudentId");

                    b.HasIndex("StudentIncidentActionId");

                    b.HasIndex("StudentIncidentId");

                    b.HasIndex("StudentIncidentSymptomId");

                    b.ToTable("StudentIncidentLogs");
                });

            modelBuilder.Entity("DEKODE.AttendMe.Api.Model.Entities.StudentIncidentSymptom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AuditUser")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EffectiveEndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EffectiveStartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("StudentIncidentSymptoms");
                });

            modelBuilder.Entity("DEKODE.AttendMe.Api.Model.Entities.StudentLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AuditUser")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EffectiveEndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EffectiveStartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LogDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LogType")
                        .HasColumnType("int");

                    b.Property<string>("OtherReason")
                        .HasColumnType("longtext");

                    b.Property<int>("PatronId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("StudentLogReasonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatronId");

                    b.HasIndex("StudentId");

                    b.HasIndex("StudentLogReasonId");

                    b.ToTable("StudentLogs");
                });

            modelBuilder.Entity("DEKODE.AttendMe.Api.Model.Entities.StudentLogReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AuditUser")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EffectiveEndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EffectiveStartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("StudentLogReasons");
                });

            modelBuilder.Entity("DEKODE.AttendMe.Api.Model.Entities.VisitorLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AuditUser")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EffectiveEndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EffectiveStartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("InDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OutDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PatronId")
                        .HasColumnType("int");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("VisitingPerson")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("PatronId");

                    b.ToTable("VisitorLogs");
                });

            modelBuilder.Entity("DEKODE.AttendMe.Api.Model.Entities.Compliance", b =>
                {
                    b.HasOne("DEKODE.AttendMe.Api.Model.Entities.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("DEKODE.AttendMe.Api.Model.Entities.Organisation", b =>
                {
                    b.OwnsOne("DEKODE.AttendMe.Api.Model.Entities.Address", "Address", b1 =>
                        {
                            b1.Property<int>("OrganisationId")
                                .HasColumnType("int");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("Country");

                            b1.Property<string>("PostCode")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("PostCode");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("State");

                            b1.Property<string>("StreetName")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("StreetName");

                            b1.Property<string>("StreetNo")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("StreetNo");

                            b1.Property<string>("Suburb")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("Suburb");

                            b1.HasKey("OrganisationId");

                            b1.ToTable("Organisations");

                            b1.WithOwner()
                                .HasForeignKey("OrganisationId");

                            b1.HasData(
                                new
                                {
                                    OrganisationId = 1,
                                    Country = "Australia",
                                    PostCode = "3030",
                                    State = "VIC",
                                    StreetName = "Main Street",
                                    StreetNo = "1",
                                    Suburb = "Melbourne"
                                });
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("DEKODE.AttendMe.Api.Model.Entities.OrganisationUser", b =>
                {
                    b.HasOne("DEKODE.AttendMe.Api.Model.Entities.Organisation", "Organisation")
                        .WithMany("Users")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("DEKODE.AttendMe.Api.Model.Entities.Patron", b =>
                {
                    b.HasOne("DEKODE.AttendMe.Api.Model.Entities.Organisation", "Organisation")
                        .WithMany("Patrons")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DEKODE.AttendMe.Api.Model.Entities.PatronType", "PatronType")
                        .WithMany()
                        .HasForeignKey("PatronTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");

                    b.Navigation("PatronType");
                });

            modelBuilder.Entity("DEKODE.AttendMe.Api.Model.Entities.PatronCompliance", b =>
                {
                    b.HasOne("DEKODE.AttendMe.Api.Model.Entities.Compliance", "Compliance")
                        .WithMany()
                        .HasForeignKey("ComplianceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DEKODE.AttendMe.Api.Model.Entities.Patron", "Patron")
                        .WithMany()
                        .HasForeignKey("PatronId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Compliance");

                    b.Navigation("Patron");
                });

            modelBuilder.Entity("DEKODE.AttendMe.Api.Model.Entities.PatronStudent", b =>
                {
                    b.HasOne("DEKODE.AttendMe.Api.Model.Entities.Patron", "Patron")
                        .WithMany()
                        .HasForeignKey("PatronId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DEKODE.AttendMe.Api.Model.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patron");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("DEKODE.AttendMe.Api.Model.Entities.Staff", b =>
                {
                    b.HasOne("DEKODE.AttendMe.Api.Model.Entities.Organisation", "Organisation")
                        .WithMany("StaffMembers")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("DEKODE.AttendMe.Api.Model.Entities.StaffLog", b =>
                {
                    b.HasOne("DEKODE.AttendMe.Api.Model.Entities.Staff", "Staff")
                        .WithMany("StaffLogs")
                        .HasForeignKey("StaffId");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("DEKODE.AttendMe.Api.Model.Entities.Student", b =>
                {
                    b.HasOne("DEKODE.AttendMe.Api.Model.Entities.Organisation", "Organisation")
                        .WithMany("Students")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("DEKODE.AttendMe.Api.Model.Entities.StudentIncident", b =>
                {
                    b.HasOne("DEKODE.AttendMe.Api.Model.Entities.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("DEKODE.AttendMe.Api.Model.Entities.StudentIncidentAction", b =>
                {
                    b.HasOne("DEKODE.AttendMe.Api.Model.Entities.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("DEKODE.AttendMe.Api.Model.Entities.StudentIncidentLog", b =>
                {
                    b.HasOne("DEKODE.AttendMe.Api.Model.Entities.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DEKODE.AttendMe.Api.Model.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DEKODE.AttendMe.Api.Model.Entities.StudentIncidentAction", "StudentIncidentAction")
                        .WithMany()
                        .HasForeignKey("StudentIncidentActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DEKODE.AttendMe.Api.Model.Entities.StudentIncident", "StudentIncident")
                        .WithMany()
                        .HasForeignKey("StudentIncidentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DEKODE.AttendMe.Api.Model.Entities.StudentIncidentSymptom", "StudentIncidentSymptom")
                        .WithMany()
                        .HasForeignKey("StudentIncidentSymptomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");

                    b.Navigation("Student");

                    b.Navigation("StudentIncident");

                    b.Navigation("StudentIncidentAction");

                    b.Navigation("StudentIncidentSymptom");
                });

            modelBuilder.Entity("DEKODE.AttendMe.Api.Model.Entities.StudentIncidentSymptom", b =>
                {
                    b.HasOne("DEKODE.AttendMe.Api.Model.Entities.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("DEKODE.AttendMe.Api.Model.Entities.StudentLog", b =>
                {
                    b.HasOne("DEKODE.AttendMe.Api.Model.Entities.Patron", "Patron")
                        .WithMany()
                        .HasForeignKey("PatronId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DEKODE.AttendMe.Api.Model.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DEKODE.AttendMe.Api.Model.Entities.StudentLogReason", "StudentLogReason")
                        .WithMany()
                        .HasForeignKey("StudentLogReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patron");

                    b.Navigation("Student");

                    b.Navigation("StudentLogReason");
                });

            modelBuilder.Entity("DEKODE.AttendMe.Api.Model.Entities.StudentLogReason", b =>
                {
                    b.HasOne("DEKODE.AttendMe.Api.Model.Entities.Organisation", "Organisation")
                        .WithMany("StudentLogReasons")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("DEKODE.AttendMe.Api.Model.Entities.VisitorLog", b =>
                {
                    b.HasOne("DEKODE.AttendMe.Api.Model.Entities.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DEKODE.AttendMe.Api.Model.Entities.Patron", "Patron")
                        .WithMany()
                        .HasForeignKey("PatronId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");

                    b.Navigation("Patron");
                });

            modelBuilder.Entity("DEKODE.AttendMe.Api.Model.Entities.Organisation", b =>
                {
                    b.Navigation("Patrons");

                    b.Navigation("StaffMembers");

                    b.Navigation("StudentLogReasons");

                    b.Navigation("Students");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DEKODE.AttendMe.Api.Model.Entities.Staff", b =>
                {
                    b.Navigation("StaffLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
